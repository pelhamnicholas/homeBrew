
working.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000e54  00000ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000647  00800118  00800118  00000f00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002645  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb5  00000000  00000000  000037b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ba  00000000  00000000  0000476a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000560  00000000  00000000  00005c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dab  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001554  00000000  00000000  00006f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  00008483  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	9f c3       	rjmp	.+1854   	; 0x774 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c1       	rjmp	.+682    	; 0x2f8 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e5       	ldi	r30, 0x54	; 84
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 35       	cpi	r26, 0x5F	; 95
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f1 d1       	rcall	.+994    	; 0x4a6 <main>
  c4:	c5 c6       	rjmp	.+3466   	; 0xe50 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	a5 d4       	rcall	.+2378   	; 0xa1a <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
  d4:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__data_end+0x1>
  d8:	ce 01       	movw	r24, r28
  da:	82 0f       	add	r24, r18
  dc:	93 1f       	adc	r25, r19
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	c6 5e       	subi	r28, 0xE6	; 230
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
  f6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 106:	50 d5       	rcall	.+2720   	; 0xba8 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	8e 17       	cp	r24, r30
 22a:	9f 07       	cpc	r25, r31
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <SPI_MasterInit>:

/******************************* TMASTER TASK *******************************/
enum TMasterState { INIT, GET_INPUT } TMaster_state;

void TMaster_Init(){
    TMaster_state = INIT;
 246:	80 ea       	ldi	r24, 0xA0	; 160
 248:	84 b9       	out	0x04, r24	; 4
 24a:	8f e5       	ldi	r24, 0x5F	; 95
 24c:	85 b9       	out	0x05, r24	; 5
 24e:	81 e5       	ldi	r24, 0x51	; 81
 250:	8c bd       	out	0x2c, r24	; 44
 252:	78 94       	sei
 254:	08 95       	ret

00000256 <SPI_Transmit_Char>:
 256:	8e bd       	out	0x2e, r24	; 46
 258:	0d b4       	in	r0, 0x2d	; 45
 25a:	07 fe       	sbrs	r0, 7
 25c:	fd cf       	rjmp	.-6      	; 0x258 <SPI_Transmit_Char+0x2>
 25e:	8e b5       	in	r24, 0x2e	; 46
 260:	08 95       	ret

00000262 <SPI_Transmit_Short>:
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	d8 2f       	mov	r29, r24
 268:	c9 2f       	mov	r28, r25
 26a:	89 2f       	mov	r24, r25
 26c:	f4 df       	rcall	.-24     	; 0x256 <SPI_Transmit_Char>
 26e:	8d 2f       	mov	r24, r29
 270:	f2 df       	rcall	.-28     	; 0x256 <SPI_Transmit_Char>
 272:	8d 2f       	mov	r24, r29
 274:	9c 2f       	mov	r25, r28
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <SPI_Transmit_Long>:
 27c:	cf 92       	push	r12
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	6b 01       	movw	r12, r22
 286:	7c 01       	movw	r14, r24
 288:	c7 01       	movw	r24, r14
 28a:	eb df       	rcall	.-42     	; 0x262 <SPI_Transmit_Short>
 28c:	c6 01       	movw	r24, r12
 28e:	e9 df       	rcall	.-46     	; 0x262 <SPI_Transmit_Short>
 290:	c7 01       	movw	r24, r14
 292:	b6 01       	movw	r22, r12
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	df 90       	pop	r13
 29a:	cf 90       	pop	r12
 29c:	08 95       	ret

0000029e <SPI_Receive>:
 29e:	0d b4       	in	r0, 0x2d	; 45
 2a0:	07 fe       	sbrs	r0, 7
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <SPI_Receive>
 2a4:	8e b5       	in	r24, 0x2e	; 46
 2a6:	08 95       	ret

000002a8 <SPI_Receive_Short>:
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	f8 df       	rcall	.-16     	; 0x29e <SPI_Receive>
 2ae:	c8 2f       	mov	r28, r24
 2b0:	d0 e0       	ldi	r29, 0x00	; 0
 2b2:	dc 2f       	mov	r29, r28
 2b4:	cc 27       	eor	r28, r28
 2b6:	f3 df       	rcall	.-26     	; 0x29e <SPI_Receive>
 2b8:	9e 01       	movw	r18, r28
 2ba:	28 0f       	add	r18, r24
 2bc:	31 1d       	adc	r19, r1
 2be:	c9 01       	movw	r24, r18
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <SPI_Receive_Long>:
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	ec df       	rcall	.-40     	; 0x2a8 <SPI_Receive_Short>
 2d0:	6c 01       	movw	r12, r24
 2d2:	e1 2c       	mov	r14, r1
 2d4:	f1 2c       	mov	r15, r1
 2d6:	76 01       	movw	r14, r12
 2d8:	dd 24       	eor	r13, r13
 2da:	cc 24       	eor	r12, r12
 2dc:	e5 df       	rcall	.-54     	; 0x2a8 <SPI_Receive_Short>
 2de:	a7 01       	movw	r20, r14
 2e0:	96 01       	movw	r18, r12
 2e2:	28 0f       	add	r18, r24
 2e4:	39 1f       	adc	r19, r25
 2e6:	41 1d       	adc	r20, r1
 2e8:	51 1d       	adc	r21, r1
 2ea:	ca 01       	movw	r24, r20
 2ec:	b9 01       	movw	r22, r18
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	df 90       	pop	r13
 2f4:	cf 90       	pop	r12
 2f6:	08 95       	ret

000002f8 <__vector_19>:
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	0b b6       	in	r0, 0x3b	; 59
 304:	0f 92       	push	r0
 306:	2f 93       	push	r18
 308:	3f 93       	push	r19
 30a:	4f 93       	push	r20
 30c:	5f 93       	push	r21
 30e:	6f 93       	push	r22
 310:	7f 93       	push	r23
 312:	8f 93       	push	r24
 314:	9f 93       	push	r25
 316:	af 93       	push	r26
 318:	bf 93       	push	r27
 31a:	ef 93       	push	r30
 31c:	ff 93       	push	r31
 31e:	d3 df       	rcall	.-90     	; 0x2c6 <SPI_Receive_Long>
 320:	60 93 5a 07 	sts	0x075A, r22	; 0x80075a <receivedData>
 324:	70 93 5b 07 	sts	0x075B, r23	; 0x80075b <receivedData+0x1>
 328:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <receivedData+0x2>
 32c:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <receivedData+0x3>
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0b be       	out	0x3b, r0	; 59
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <TMaster_Tick>:
}

void TMaster_Tick()
{
    /* actions */
    switch(TMaster_state){
 356:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <TMaster_state>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	09 f0       	breq	.+2      	; 0x360 <TMaster_Tick+0xa>
 35e:	6f c0       	rjmp	.+222    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
        case INIT:
            break;
        case GET_INPUT:
            if (~PINA & 0x01) {
 360:	00 99       	sbic	0x00, 0	; 0
 362:	1a c0       	rjmp	.+52     	; 0x398 <TMaster_Tick+0x42>
                /* send HEAT WATER to HLT */
                PORTB = (PORTB & 0xF0) | 0x01;
 364:	85 b1       	in	r24, 0x05	; 5
 366:	80 7f       	andi	r24, 0xF0	; 240
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	85 b9       	out	0x05, r24	; 5
                SPI_Transmit_Long((1 << 16) + HLT_maxVol);
 36c:	60 91 fe 06 	lds	r22, 0x06FE	; 0x8006fe <HLT_maxVol>
 370:	70 91 ff 06 	lds	r23, 0x06FF	; 0x8006ff <HLT_maxVol+0x1>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	81 df       	rcall	.-254    	; 0x27c <SPI_Transmit_Long>
                SPI_Transmit_Long(2 << 16);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	cb 01       	movw	r24, r22
 380:	7d df       	rcall	.-262    	; 0x27c <SPI_Transmit_Long>
                SPI_Transmit_Long((3 << 16) + HLT_desiredTemp);
 382:	60 91 fc 06 	lds	r22, 0x06FC	; 0x8006fc <HLT_desiredTemp>
 386:	70 91 fd 06 	lds	r23, 0x06FD	; 0x8006fd <HLT_desiredTemp+0x1>
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	76 df       	rcall	.-276    	; 0x27c <SPI_Transmit_Long>
                PORTB = PORTB & 0xF0;
 390:	85 b1       	in	r24, 0x05	; 5
 392:	80 7f       	andi	r24, 0xF0	; 240
 394:	85 b9       	out	0x05, r24	; 5
 396:	53 c0       	rjmp	.+166    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
            } else if (~PINA & 0x02) {
 398:	01 99       	sbic	0x00, 1	; 0
 39a:	1b c0       	rjmp	.+54     	; 0x3d2 <TMaster_Tick+0x7c>
                /* send PERSIST HEAT WATER to HLT */
                PORTB = (PORTB & 0xF0) | 0x01;
 39c:	85 b1       	in	r24, 0x05	; 5
 39e:	80 7f       	andi	r24, 0xF0	; 240
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	85 b9       	out	0x05, r24	; 5
                SPI_Transmit_Long((1 << 16) + HLT_maxVol);
 3a4:	60 91 fe 06 	lds	r22, 0x06FE	; 0x8006fe <HLT_maxVol>
 3a8:	70 91 ff 06 	lds	r23, 0x06FF	; 0x8006ff <HLT_maxVol+0x1>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	65 df       	rcall	.-310    	; 0x27c <SPI_Transmit_Long>
                SPI_Transmit_Long((2 << 16) + 1);
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	60 df       	rcall	.-320    	; 0x27c <SPI_Transmit_Long>
                SPI_Transmit_Long((3 << 16) + HLT_desiredTemp);
 3bc:	60 91 fc 06 	lds	r22, 0x06FC	; 0x8006fc <HLT_desiredTemp>
 3c0:	70 91 fd 06 	lds	r23, 0x06FD	; 0x8006fd <HLT_desiredTemp+0x1>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	59 df       	rcall	.-334    	; 0x27c <SPI_Transmit_Long>
                PORTB = PORTB & 0xF0;
 3ca:	85 b1       	in	r24, 0x05	; 5
 3cc:	80 7f       	andi	r24, 0xF0	; 240
 3ce:	85 b9       	out	0x05, r24	; 5
 3d0:	36 c0       	rjmp	.+108    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
            } else if (~PINA & 0x04) {
 3d2:	02 99       	sbic	0x00, 2	; 0
 3d4:	16 c0       	rjmp	.+44     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
                /* send START MASH to MT */
                PORTB = (PORTB & 0xF0) | 0x02;
 3d6:	85 b1       	in	r24, 0x05	; 5
 3d8:	80 7f       	andi	r24, 0xF0	; 240
 3da:	82 60       	ori	r24, 0x02	; 2
 3dc:	85 b9       	out	0x05, r24	; 5
                SPI_Transmit_Long((1 << 16) + MT_mashTime);
 3de:	60 91 fa 06 	lds	r22, 0x06FA	; 0x8006fa <MT_mashTime>
 3e2:	70 91 fb 06 	lds	r23, 0x06FB	; 0x8006fb <MT_mashTime+0x1>
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	48 df       	rcall	.-368    	; 0x27c <SPI_Transmit_Long>
                SPI_Transmit_Long((3 << 16) + MT_desiredTemp);
 3ec:	60 91 f8 06 	lds	r22, 0x06F8	; 0x8006f8 <MT_desiredTemp>
 3f0:	70 91 f9 06 	lds	r23, 0x06F9	; 0x8006f9 <MT_desiredTemp+0x1>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	41 df       	rcall	.-382    	; 0x27c <SPI_Transmit_Long>
                PORTB = PORTB & 0xF0;
 3fa:	85 b1       	in	r24, 0x05	; 5
 3fc:	80 7f       	andi	r24, 0xF0	; 240
 3fe:	85 b9       	out	0x05, r24	; 5
 400:	1e c0       	rjmp	.+60     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
            } else if (~PINA & 0x08) {
 402:	03 99       	sbic	0x00, 3	; 0
 404:	29 c0       	rjmp	.+82     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
                /* send START BOIL to BK */
                PORTB = (PORTB & 0xF0) | 0x04;
 406:	85 b1       	in	r24, 0x05	; 5
 408:	80 7f       	andi	r24, 0xF0	; 240
 40a:	84 60       	ori	r24, 0x04	; 4
 40c:	85 b9       	out	0x05, r24	; 5
                SPI_Transmit_Long((1 << 16) + BK_maxVol);
 40e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <BK_maxVol>
 412:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <BK_maxVol+0x1>
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	30 df       	rcall	.-416    	; 0x27c <SPI_Transmit_Long>
                SPI_Transmit_Long((2 << 16) + BK_boilTime);
 41c:	60 91 f6 06 	lds	r22, 0x06F6	; 0x8006f6 <BK_boilTime>
 420:	70 91 f7 06 	lds	r23, 0x06F7	; 0x8006f7 <BK_boilTime+0x1>
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	29 df       	rcall	.-430    	; 0x27c <SPI_Transmit_Long>
                SPI_Transmit_Long((3 << 16) + BK_desiredTemp);
 42a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <BK_desiredTemp>
 42e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <BK_desiredTemp+0x1>
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	22 df       	rcall	.-444    	; 0x27c <SPI_Transmit_Long>
                PORTB = PORTB & 0xF0;
 438:	85 b1       	in	r24, 0x05	; 5
 43a:	80 7f       	andi	r24, 0xF0	; 240
 43c:	85 b9       	out	0x05, r24	; 5
        default:
            break;
    }

    /* transitions */
    switch(TMaster_state){
 43e:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <TMaster_state>
 442:	88 23       	and	r24, r24
 444:	19 f0       	breq	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	29 f4       	brne	.+10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44a:	08 95       	ret
        case INIT:
            TMaster_state = GET_INPUT;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <TMaster_state>
            break;
 452:	08 95       	ret
        case GET_INPUT:
            break;
        default:
            TMaster_state = INIT;
 454:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <TMaster_state>
 458:	08 95       	ret

0000045a <TMaster_Task>:

/******************************* TMASTER TASK *******************************/
enum TMasterState { INIT, GET_INPUT } TMaster_state;

void TMaster_Init(){
    TMaster_state = INIT;
 45a:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <TMaster_state>
void TMaster_Task()
{
    TMaster_Init();
    for(;;)
    {
        TMaster_Tick();
 45e:	7b df       	rcall	.-266    	; 0x356 <TMaster_Tick>
        vTaskDelay(100);
 460:	84 e6       	ldi	r24, 0x64	; 100
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	22 d4       	rcall	.+2116   	; 0xcaa <vTaskDelay>
    }
 466:	fb cf       	rjmp	.-10     	; 0x45e <TMaster_Task+0x4>

00000468 <StartSecPulse>:
}
/******************************* TMASTER TASK *******************************/

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
 468:	af 92       	push	r10
 46a:	bf 92       	push	r11
 46c:	cf 92       	push	r12
 46e:	df 92       	push	r13
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
    xTaskCreate(TMaster_Task, (signed portCHAR *)"TMaster_Task", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 476:	a1 2c       	mov	r10, r1
 478:	b1 2c       	mov	r11, r1
 47a:	c1 2c       	mov	r12, r1
 47c:	d1 2c       	mov	r13, r1
 47e:	e1 2c       	mov	r14, r1
 480:	f1 2c       	mov	r15, r1
 482:	08 2f       	mov	r16, r24
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	45 e5       	ldi	r20, 0x55	; 85
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	66 e0       	ldi	r22, 0x06	; 6
 48e:	71 e0       	ldi	r23, 0x01	; 1
 490:	8d e2       	ldi	r24, 0x2D	; 45
 492:	92 e0       	ldi	r25, 0x02	; 2
 494:	a6 d1       	rcall	.+844    	; 0x7e2 <xTaskGenericCreate>
}
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	bf 90       	pop	r11
 4a2:	af 90       	pop	r10
 4a4:	08 95       	ret

000004a6 <main>:
int main(void)
{
    //DDR and Port settings:
    //DDR:  0x00 = input, 0xFF = output
    //PORT: 0xFF = input, 0x00 = output
    DDRA = 0x00; PORTA = 0xFF;
 4a6:	11 b8       	out	0x01, r1	; 1
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF; PORTB = 0x00;
 4ac:	84 b9       	out	0x04, r24	; 4
 4ae:	15 b8       	out	0x05, r1	; 5
    DDRC = 0xFF; PORTC = 0x00;
 4b0:	87 b9       	out	0x07, r24	; 7
 4b2:	18 b8       	out	0x08, r1	; 8
    DDRD = 0x00; PORTD = 0xFF;
 4b4:	1a b8       	out	0x0a, r1	; 10
 4b6:	8b b9       	out	0x0b, r24	; 11
    //Start Tasks
    StartSecPulse(1);
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	d6 df       	rcall	.-84     	; 0x468 <StartSecPulse>
    /* Init SPI */
    SPI_MasterInit();
 4bc:	c4 de       	rcall	.-632    	; 0x246 <SPI_MasterInit>
    //RunScheduler
    vTaskStartScheduler();
 4be:	84 d2       	rcall	.+1288   	; 0x9c8 <vTaskStartScheduler>
    
    return 0;
}
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	08 95       	ret

000004c6 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 4c6:	31 e1       	ldi	r19, 0x11	; 17
 4c8:	fc 01       	movw	r30, r24
 4ca:	30 83       	st	Z, r19
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	22 e2       	ldi	r18, 0x22	; 34
 4d0:	20 83       	st	Z, r18
 4d2:	31 97       	sbiw	r30, 0x01	; 1
 4d4:	a3 e3       	ldi	r26, 0x33	; 51
 4d6:	a0 83       	st	Z, r26
 4d8:	31 97       	sbiw	r30, 0x01	; 1
 4da:	60 83       	st	Z, r22
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	70 83       	st	Z, r23
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	10 82       	st	Z, r1
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	60 e8       	ldi	r22, 0x80	; 128
 4e8:	60 83       	st	Z, r22
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	10 82       	st	Z, r1
 4ee:	31 97       	sbiw	r30, 0x01	; 1
 4f0:	62 e0       	ldi	r22, 0x02	; 2
 4f2:	60 83       	st	Z, r22
 4f4:	31 97       	sbiw	r30, 0x01	; 1
 4f6:	63 e0       	ldi	r22, 0x03	; 3
 4f8:	60 83       	st	Z, r22
 4fa:	31 97       	sbiw	r30, 0x01	; 1
 4fc:	64 e0       	ldi	r22, 0x04	; 4
 4fe:	60 83       	st	Z, r22
 500:	31 97       	sbiw	r30, 0x01	; 1
 502:	65 e0       	ldi	r22, 0x05	; 5
 504:	60 83       	st	Z, r22
 506:	31 97       	sbiw	r30, 0x01	; 1
 508:	66 e0       	ldi	r22, 0x06	; 6
 50a:	60 83       	st	Z, r22
 50c:	31 97       	sbiw	r30, 0x01	; 1
 50e:	67 e0       	ldi	r22, 0x07	; 7
 510:	60 83       	st	Z, r22
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	68 e0       	ldi	r22, 0x08	; 8
 516:	60 83       	st	Z, r22
 518:	31 97       	sbiw	r30, 0x01	; 1
 51a:	69 e0       	ldi	r22, 0x09	; 9
 51c:	60 83       	st	Z, r22
 51e:	31 97       	sbiw	r30, 0x01	; 1
 520:	60 e1       	ldi	r22, 0x10	; 16
 522:	60 83       	st	Z, r22
 524:	31 97       	sbiw	r30, 0x01	; 1
 526:	30 83       	st	Z, r19
 528:	31 97       	sbiw	r30, 0x01	; 1
 52a:	32 e1       	ldi	r19, 0x12	; 18
 52c:	30 83       	st	Z, r19
 52e:	31 97       	sbiw	r30, 0x01	; 1
 530:	33 e1       	ldi	r19, 0x13	; 19
 532:	30 83       	st	Z, r19
 534:	31 97       	sbiw	r30, 0x01	; 1
 536:	34 e1       	ldi	r19, 0x14	; 20
 538:	30 83       	st	Z, r19
 53a:	31 97       	sbiw	r30, 0x01	; 1
 53c:	35 e1       	ldi	r19, 0x15	; 21
 53e:	30 83       	st	Z, r19
 540:	31 97       	sbiw	r30, 0x01	; 1
 542:	36 e1       	ldi	r19, 0x16	; 22
 544:	30 83       	st	Z, r19
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	37 e1       	ldi	r19, 0x17	; 23
 54a:	30 83       	st	Z, r19
 54c:	31 97       	sbiw	r30, 0x01	; 1
 54e:	38 e1       	ldi	r19, 0x18	; 24
 550:	30 83       	st	Z, r19
 552:	31 97       	sbiw	r30, 0x01	; 1
 554:	39 e1       	ldi	r19, 0x19	; 25
 556:	30 83       	st	Z, r19
 558:	31 97       	sbiw	r30, 0x01	; 1
 55a:	30 e2       	ldi	r19, 0x20	; 32
 55c:	30 83       	st	Z, r19
 55e:	31 97       	sbiw	r30, 0x01	; 1
 560:	31 e2       	ldi	r19, 0x21	; 33
 562:	30 83       	st	Z, r19
 564:	31 97       	sbiw	r30, 0x01	; 1
 566:	20 83       	st	Z, r18
 568:	31 97       	sbiw	r30, 0x01	; 1
 56a:	23 e2       	ldi	r18, 0x23	; 35
 56c:	20 83       	st	Z, r18
 56e:	31 97       	sbiw	r30, 0x01	; 1
 570:	40 83       	st	Z, r20
 572:	31 97       	sbiw	r30, 0x01	; 1
 574:	50 83       	st	Z, r21
 576:	31 97       	sbiw	r30, 0x01	; 1
 578:	26 e2       	ldi	r18, 0x26	; 38
 57a:	20 83       	st	Z, r18
 57c:	31 97       	sbiw	r30, 0x01	; 1
 57e:	27 e2       	ldi	r18, 0x27	; 39
 580:	20 83       	st	Z, r18
 582:	31 97       	sbiw	r30, 0x01	; 1
 584:	28 e2       	ldi	r18, 0x28	; 40
 586:	20 83       	st	Z, r18
 588:	31 97       	sbiw	r30, 0x01	; 1
 58a:	29 e2       	ldi	r18, 0x29	; 41
 58c:	20 83       	st	Z, r18
 58e:	31 97       	sbiw	r30, 0x01	; 1
 590:	20 e3       	ldi	r18, 0x30	; 48
 592:	20 83       	st	Z, r18
 594:	31 97       	sbiw	r30, 0x01	; 1
 596:	21 e3       	ldi	r18, 0x31	; 49
 598:	20 83       	st	Z, r18
 59a:	86 97       	sbiw	r24, 0x26	; 38
 59c:	08 95       	ret

0000059e <xPortStartScheduler>:
 59e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 5a2:	8c e7       	ldi	r24, 0x7C	; 124
 5a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 5a8:	8b e0       	ldi	r24, 0x0B	; 11
 5aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 5ae:	ef e6       	ldi	r30, 0x6F	; 111
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	82 60       	ori	r24, 0x02	; 2
 5b6:	80 83       	st	Z, r24
 5b8:	a0 91 58 07 	lds	r26, 0x0758	; 0x800758 <pxCurrentTCB>
 5bc:	b0 91 59 07 	lds	r27, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 5c0:	cd 91       	ld	r28, X+
 5c2:	cd bf       	out	0x3d, r28	; 61
 5c4:	dd 91       	ld	r29, X+
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	bf 91       	pop	r27
 5d2:	af 91       	pop	r26
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	7f 91       	pop	r23
 5da:	6f 91       	pop	r22
 5dc:	5f 91       	pop	r21
 5de:	4f 91       	pop	r20
 5e0:	3f 91       	pop	r19
 5e2:	2f 91       	pop	r18
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	ff 90       	pop	r15
 5ea:	ef 90       	pop	r14
 5ec:	df 90       	pop	r13
 5ee:	cf 90       	pop	r12
 5f0:	bf 90       	pop	r11
 5f2:	af 90       	pop	r10
 5f4:	9f 90       	pop	r9
 5f6:	8f 90       	pop	r8
 5f8:	7f 90       	pop	r7
 5fa:	6f 90       	pop	r6
 5fc:	5f 90       	pop	r5
 5fe:	4f 90       	pop	r4
 600:	3f 90       	pop	r3
 602:	2f 90       	pop	r2
 604:	1f 90       	pop	r1
 606:	0f 90       	pop	r0
 608:	0f be       	out	0x3f, r0	; 63
 60a:	0f 90       	pop	r0
 60c:	08 95       	ret
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	08 95       	ret

00000612 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 612:	0f 92       	push	r0
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	f8 94       	cli
 618:	0f 92       	push	r0
 61a:	1f 92       	push	r1
 61c:	11 24       	eor	r1, r1
 61e:	2f 92       	push	r2
 620:	3f 92       	push	r3
 622:	4f 92       	push	r4
 624:	5f 92       	push	r5
 626:	6f 92       	push	r6
 628:	7f 92       	push	r7
 62a:	8f 92       	push	r8
 62c:	9f 92       	push	r9
 62e:	af 92       	push	r10
 630:	bf 92       	push	r11
 632:	cf 92       	push	r12
 634:	df 92       	push	r13
 636:	ef 92       	push	r14
 638:	ff 92       	push	r15
 63a:	0f 93       	push	r16
 63c:	1f 93       	push	r17
 63e:	2f 93       	push	r18
 640:	3f 93       	push	r19
 642:	4f 93       	push	r20
 644:	5f 93       	push	r21
 646:	6f 93       	push	r22
 648:	7f 93       	push	r23
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	af 93       	push	r26
 650:	bf 93       	push	r27
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	ef 93       	push	r30
 658:	ff 93       	push	r31
 65a:	a0 91 58 07 	lds	r26, 0x0758	; 0x800758 <pxCurrentTCB>
 65e:	b0 91 59 07 	lds	r27, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 662:	0d b6       	in	r0, 0x3d	; 61
 664:	0d 92       	st	X+, r0
 666:	0e b6       	in	r0, 0x3e	; 62
 668:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 66a:	70 d3       	rcall	.+1760   	; 0xd4c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 66c:	a0 91 58 07 	lds	r26, 0x0758	; 0x800758 <pxCurrentTCB>
 670:	b0 91 59 07 	lds	r27, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 674:	cd 91       	ld	r28, X+
 676:	cd bf       	out	0x3d, r28	; 61
 678:	dd 91       	ld	r29, X+
 67a:	de bf       	out	0x3e, r29	; 62
 67c:	ff 91       	pop	r31
 67e:	ef 91       	pop	r30
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	bf 91       	pop	r27
 686:	af 91       	pop	r26
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	7f 91       	pop	r23
 68e:	6f 91       	pop	r22
 690:	5f 91       	pop	r21
 692:	4f 91       	pop	r20
 694:	3f 91       	pop	r19
 696:	2f 91       	pop	r18
 698:	1f 91       	pop	r17
 69a:	0f 91       	pop	r16
 69c:	ff 90       	pop	r15
 69e:	ef 90       	pop	r14
 6a0:	df 90       	pop	r13
 6a2:	cf 90       	pop	r12
 6a4:	bf 90       	pop	r11
 6a6:	af 90       	pop	r10
 6a8:	9f 90       	pop	r9
 6aa:	8f 90       	pop	r8
 6ac:	7f 90       	pop	r7
 6ae:	6f 90       	pop	r6
 6b0:	5f 90       	pop	r5
 6b2:	4f 90       	pop	r4
 6b4:	3f 90       	pop	r3
 6b6:	2f 90       	pop	r2
 6b8:	1f 90       	pop	r1
 6ba:	0f 90       	pop	r0
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	0f 90       	pop	r0

	asm volatile ( "ret" );
 6c0:	08 95       	ret

000006c2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 6c2:	0f 92       	push	r0
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	f8 94       	cli
 6c8:	0f 92       	push	r0
 6ca:	1f 92       	push	r1
 6cc:	11 24       	eor	r1, r1
 6ce:	2f 92       	push	r2
 6d0:	3f 92       	push	r3
 6d2:	4f 92       	push	r4
 6d4:	5f 92       	push	r5
 6d6:	6f 92       	push	r6
 6d8:	7f 92       	push	r7
 6da:	8f 92       	push	r8
 6dc:	9f 92       	push	r9
 6de:	af 92       	push	r10
 6e0:	bf 92       	push	r11
 6e2:	cf 92       	push	r12
 6e4:	df 92       	push	r13
 6e6:	ef 92       	push	r14
 6e8:	ff 92       	push	r15
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	ef 93       	push	r30
 708:	ff 93       	push	r31
 70a:	a0 91 58 07 	lds	r26, 0x0758	; 0x800758 <pxCurrentTCB>
 70e:	b0 91 59 07 	lds	r27, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 712:	0d b6       	in	r0, 0x3d	; 61
 714:	0d 92       	st	X+, r0
 716:	0e b6       	in	r0, 0x3e	; 62
 718:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 71a:	85 d1       	rcall	.+778    	; 0xa26 <vTaskIncrementTick>
	vTaskSwitchContext();
 71c:	17 d3       	rcall	.+1582   	; 0xd4c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 71e:	a0 91 58 07 	lds	r26, 0x0758	; 0x800758 <pxCurrentTCB>
 722:	b0 91 59 07 	lds	r27, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 726:	cd 91       	ld	r28, X+
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	dd 91       	ld	r29, X+
 72c:	de bf       	out	0x3e, r29	; 62
 72e:	ff 91       	pop	r31
 730:	ef 91       	pop	r30
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	1f 91       	pop	r17
 74c:	0f 91       	pop	r16
 74e:	ff 90       	pop	r15
 750:	ef 90       	pop	r14
 752:	df 90       	pop	r13
 754:	cf 90       	pop	r12
 756:	bf 90       	pop	r11
 758:	af 90       	pop	r10
 75a:	9f 90       	pop	r9
 75c:	8f 90       	pop	r8
 75e:	7f 90       	pop	r7
 760:	6f 90       	pop	r6
 762:	5f 90       	pop	r5
 764:	4f 90       	pop	r4
 766:	3f 90       	pop	r3
 768:	2f 90       	pop	r2
 76a:	1f 90       	pop	r1
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0

	asm volatile ( "ret" );
 772:	08 95       	ret

00000774 <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 774:	a6 df       	rcall	.-180    	; 0x6c2 <vPortYieldFromTick>
		asm volatile ( "reti" );
 776:	18 95       	reti

00000778 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	ec 01       	movw	r28, r24
 77e:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <pxCurrentTCB>
 782:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 786:	93 83       	std	Z+3, r25	; 0x03
 788:	82 83       	std	Z+2, r24	; 0x02
 78a:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xTickCount>
 78e:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <xTickCount+0x1>
 792:	c8 17       	cp	r28, r24
 794:	d9 07       	cpc	r29, r25
 796:	60 f4       	brcc	.+24     	; 0x7b0 <prvAddCurrentTaskToDelayedList+0x38>
 798:	60 91 58 07 	lds	r22, 0x0758	; 0x800758 <pxCurrentTCB>
 79c:	70 91 59 07 	lds	r23, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 7a0:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <pxOverflowDelayedTaskList>
 7a4:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <pxOverflowDelayedTaskList+0x1>
 7a8:	6e 5f       	subi	r22, 0xFE	; 254
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	eb dc       	rcall	.-1578   	; 0x184 <vListInsert>
 7ae:	16 c0       	rjmp	.+44     	; 0x7dc <prvAddCurrentTaskToDelayedList+0x64>
 7b0:	60 91 58 07 	lds	r22, 0x0758	; 0x800758 <pxCurrentTCB>
 7b4:	70 91 59 07 	lds	r23, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 7b8:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <pxDelayedTaskList>
 7bc:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <pxDelayedTaskList+0x1>
 7c0:	6e 5f       	subi	r22, 0xFE	; 254
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	df dc       	rcall	.-1602   	; 0x184 <vListInsert>
 7c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xNextTaskUnblockTime>
 7ca:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xNextTaskUnblockTime+0x1>
 7ce:	c8 17       	cp	r28, r24
 7d0:	d9 07       	cpc	r29, r25
 7d2:	20 f4       	brcc	.+8      	; 0x7dc <prvAddCurrentTaskToDelayedList+0x64>
 7d4:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <xNextTaskUnblockTime+0x1>
 7d8:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <xNextTaskUnblockTime>
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	08 95       	ret

000007e2 <xTaskGenericCreate>:
 7e2:	4f 92       	push	r4
 7e4:	5f 92       	push	r5
 7e6:	6f 92       	push	r6
 7e8:	7f 92       	push	r7
 7ea:	8f 92       	push	r8
 7ec:	9f 92       	push	r9
 7ee:	af 92       	push	r10
 7f0:	bf 92       	push	r11
 7f2:	cf 92       	push	r12
 7f4:	df 92       	push	r13
 7f6:	ef 92       	push	r14
 7f8:	ff 92       	push	r15
 7fa:	0f 93       	push	r16
 7fc:	1f 93       	push	r17
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29
 802:	5c 01       	movw	r10, r24
 804:	4b 01       	movw	r8, r22
 806:	3a 01       	movw	r6, r20
 808:	29 01       	movw	r4, r18
 80a:	81 e2       	ldi	r24, 0x21	; 33
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	5c dc       	rcall	.-1864   	; 0xc8 <pvPortMalloc>
 810:	ec 01       	movw	r28, r24
 812:	89 2b       	or	r24, r25
 814:	09 f4       	brne	.+2      	; 0x818 <xTaskGenericCreate+0x36>
 816:	c6 c0       	rjmp	.+396    	; 0x9a4 <xTaskGenericCreate+0x1c2>
 818:	c1 14       	cp	r12, r1
 81a:	d1 04       	cpc	r13, r1
 81c:	09 f0       	breq	.+2      	; 0x820 <xTaskGenericCreate+0x3e>
 81e:	be c0       	rjmp	.+380    	; 0x99c <xTaskGenericCreate+0x1ba>
 820:	c3 01       	movw	r24, r6
 822:	52 dc       	rcall	.-1884   	; 0xc8 <pvPortMalloc>
 824:	98 8f       	std	Y+24, r25	; 0x18
 826:	8f 8b       	std	Y+23, r24	; 0x17
 828:	00 97       	sbiw	r24, 0x00	; 0
 82a:	19 f4       	brne	.+6      	; 0x832 <xTaskGenericCreate+0x50>
 82c:	ce 01       	movw	r24, r28
 82e:	70 dc       	rcall	.-1824   	; 0x110 <vPortFree>
 830:	b9 c0       	rjmp	.+370    	; 0x9a4 <xTaskGenericCreate+0x1c2>
 832:	a3 01       	movw	r20, r6
 834:	65 ea       	ldi	r22, 0xA5	; 165
 836:	70 e0       	ldi	r23, 0x00	; 0
 838:	f5 d2       	rcall	.+1514   	; 0xe24 <memset>
 83a:	93 01       	movw	r18, r6
 83c:	21 50       	subi	r18, 0x01	; 1
 83e:	31 09       	sbc	r19, r1
 840:	8f 89       	ldd	r24, Y+23	; 0x17
 842:	98 8d       	ldd	r25, Y+24	; 0x18
 844:	3c 01       	movw	r6, r24
 846:	62 0e       	add	r6, r18
 848:	73 1e       	adc	r7, r19
 84a:	48 e0       	ldi	r20, 0x08	; 8
 84c:	50 e0       	ldi	r21, 0x00	; 0
 84e:	b4 01       	movw	r22, r8
 850:	ce 01       	movw	r24, r28
 852:	49 96       	adiw	r24, 0x19	; 25
 854:	ee d2       	rcall	.+1500   	; 0xe32 <strncpy>
 856:	18 a2       	std	Y+32, r1	; 0x20
 858:	10 2f       	mov	r17, r16
 85a:	04 30       	cpi	r16, 0x04	; 4
 85c:	08 f0       	brcs	.+2      	; 0x860 <xTaskGenericCreate+0x7e>
 85e:	13 e0       	ldi	r17, 0x03	; 3
 860:	1e 8b       	std	Y+22, r17	; 0x16
 862:	6e 01       	movw	r12, r28
 864:	82 e0       	ldi	r24, 0x02	; 2
 866:	c8 0e       	add	r12, r24
 868:	d1 1c       	adc	r13, r1
 86a:	c6 01       	movw	r24, r12
 86c:	60 dc       	rcall	.-1856   	; 0x12e <vListInitialiseItem>
 86e:	ce 01       	movw	r24, r28
 870:	0c 96       	adiw	r24, 0x0c	; 12
 872:	5d dc       	rcall	.-1862   	; 0x12e <vListInitialiseItem>
 874:	d9 87       	std	Y+9, r29	; 0x09
 876:	c8 87       	std	Y+8, r28	; 0x08
 878:	84 e0       	ldi	r24, 0x04	; 4
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	81 1b       	sub	r24, r17
 87e:	91 09       	sbc	r25, r1
 880:	9d 87       	std	Y+13, r25	; 0x0d
 882:	8c 87       	std	Y+12, r24	; 0x0c
 884:	db 8b       	std	Y+19, r29	; 0x13
 886:	ca 8b       	std	Y+18, r28	; 0x12
 888:	a2 01       	movw	r20, r4
 88a:	b5 01       	movw	r22, r10
 88c:	c3 01       	movw	r24, r6
 88e:	1b de       	rcall	.-970    	; 0x4c6 <pxPortInitialiseStack>
 890:	99 83       	std	Y+1, r25	; 0x01
 892:	88 83       	st	Y, r24
 894:	e1 14       	cp	r14, r1
 896:	f1 04       	cpc	r15, r1
 898:	19 f0       	breq	.+6      	; 0x8a0 <xTaskGenericCreate+0xbe>
 89a:	f7 01       	movw	r30, r14
 89c:	d1 83       	std	Z+1, r29	; 0x01
 89e:	c0 83       	st	Z, r28
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	0f 92       	push	r0
 8a6:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxCurrentNumberOfTasks>
 8aa:	8f 5f       	subi	r24, 0xFF	; 255
 8ac:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxCurrentNumberOfTasks>
 8b0:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <pxCurrentTCB>
 8b4:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 8b8:	89 2b       	or	r24, r25
 8ba:	69 f5       	brne	.+90     	; 0x916 <xTaskGenericCreate+0x134>
 8bc:	d0 93 59 07 	sts	0x0759, r29	; 0x800759 <pxCurrentTCB+0x1>
 8c0:	c0 93 58 07 	sts	0x0758, r28	; 0x800758 <pxCurrentTCB>
 8c4:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxCurrentNumberOfTasks>
 8c8:	81 30       	cpi	r24, 0x01	; 1
 8ca:	a1 f5       	brne	.+104    	; 0x934 <xTaskGenericCreate+0x152>
 8cc:	84 e3       	ldi	r24, 0x34	; 52
 8ce:	97 e0       	ldi	r25, 0x07	; 7
 8d0:	20 dc       	rcall	.-1984   	; 0x112 <vListInitialise>
 8d2:	8d e3       	ldi	r24, 0x3D	; 61
 8d4:	97 e0       	ldi	r25, 0x07	; 7
 8d6:	1d dc       	rcall	.-1990   	; 0x112 <vListInitialise>
 8d8:	86 e4       	ldi	r24, 0x46	; 70
 8da:	97 e0       	ldi	r25, 0x07	; 7
 8dc:	1a dc       	rcall	.-1996   	; 0x112 <vListInitialise>
 8de:	8f e4       	ldi	r24, 0x4F	; 79
 8e0:	97 e0       	ldi	r25, 0x07	; 7
 8e2:	17 dc       	rcall	.-2002   	; 0x112 <vListInitialise>
 8e4:	8b e2       	ldi	r24, 0x2B	; 43
 8e6:	97 e0       	ldi	r25, 0x07	; 7
 8e8:	14 dc       	rcall	.-2008   	; 0x112 <vListInitialise>
 8ea:	82 e2       	ldi	r24, 0x22	; 34
 8ec:	97 e0       	ldi	r25, 0x07	; 7
 8ee:	11 dc       	rcall	.-2014   	; 0x112 <vListInitialise>
 8f0:	85 e1       	ldi	r24, 0x15	; 21
 8f2:	97 e0       	ldi	r25, 0x07	; 7
 8f4:	0e dc       	rcall	.-2020   	; 0x112 <vListInitialise>
 8f6:	8c e0       	ldi	r24, 0x0C	; 12
 8f8:	97 e0       	ldi	r25, 0x07	; 7
 8fa:	0b dc       	rcall	.-2026   	; 0x112 <vListInitialise>
 8fc:	8b e2       	ldi	r24, 0x2B	; 43
 8fe:	97 e0       	ldi	r25, 0x07	; 7
 900:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <pxDelayedTaskList+0x1>
 904:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <pxDelayedTaskList>
 908:	82 e2       	ldi	r24, 0x22	; 34
 90a:	97 e0       	ldi	r25, 0x07	; 7
 90c:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <pxOverflowDelayedTaskList+0x1>
 910:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <pxOverflowDelayedTaskList>
 914:	0f c0       	rjmp	.+30     	; 0x934 <xTaskGenericCreate+0x152>
 916:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <xSchedulerRunning>
 91a:	81 11       	cpse	r24, r1
 91c:	0b c0       	rjmp	.+22     	; 0x934 <xTaskGenericCreate+0x152>
 91e:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <pxCurrentTCB>
 922:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 926:	86 89       	ldd	r24, Z+22	; 0x16
 928:	08 17       	cp	r16, r24
 92a:	20 f0       	brcs	.+8      	; 0x934 <xTaskGenericCreate+0x152>
 92c:	d0 93 59 07 	sts	0x0759, r29	; 0x800759 <pxCurrentTCB+0x1>
 930:	c0 93 58 07 	sts	0x0758, r28	; 0x800758 <pxCurrentTCB>
 934:	8e 89       	ldd	r24, Y+22	; 0x16
 936:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <uxTopUsedPriority>
 93a:	98 17       	cp	r25, r24
 93c:	10 f4       	brcc	.+4      	; 0x942 <xTaskGenericCreate+0x160>
 93e:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <uxTopUsedPriority>
 942:	90 91 00 07 	lds	r25, 0x0700	; 0x800700 <uxTaskNumber>
 946:	9f 5f       	subi	r25, 0xFF	; 255
 948:	90 93 00 07 	sts	0x0700, r25	; 0x800700 <uxTaskNumber>
 94c:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <uxTopReadyPriority>
 950:	98 17       	cp	r25, r24
 952:	10 f4       	brcc	.+4      	; 0x958 <xTaskGenericCreate+0x176>
 954:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <uxTopReadyPriority>
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	9c 01       	movw	r18, r24
 95c:	22 0f       	add	r18, r18
 95e:	33 1f       	adc	r19, r19
 960:	22 0f       	add	r18, r18
 962:	33 1f       	adc	r19, r19
 964:	22 0f       	add	r18, r18
 966:	33 1f       	adc	r19, r19
 968:	82 0f       	add	r24, r18
 96a:	93 1f       	adc	r25, r19
 96c:	b6 01       	movw	r22, r12
 96e:	8c 5c       	subi	r24, 0xCC	; 204
 970:	98 4f       	sbci	r25, 0xF8	; 248
 972:	e1 db       	rcall	.-2110   	; 0x136 <vListInsertEnd>
 974:	0f 90       	pop	r0
 976:	0f be       	out	0x3f, r0	; 63
 978:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <xSchedulerRunning>
 97c:	88 23       	and	r24, r24
 97e:	51 f0       	breq	.+20     	; 0x994 <xTaskGenericCreate+0x1b2>
 980:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <pxCurrentTCB>
 984:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 988:	86 89       	ldd	r24, Z+22	; 0x16
 98a:	80 17       	cp	r24, r16
 98c:	28 f4       	brcc	.+10     	; 0x998 <xTaskGenericCreate+0x1b6>
 98e:	41 de       	rcall	.-894    	; 0x612 <vPortYield>
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	09 c0       	rjmp	.+18     	; 0x9a6 <xTaskGenericCreate+0x1c4>
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	07 c0       	rjmp	.+14     	; 0x9a6 <xTaskGenericCreate+0x1c4>
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	05 c0       	rjmp	.+10     	; 0x9a6 <xTaskGenericCreate+0x1c4>
 99c:	d8 8e       	std	Y+24, r13	; 0x18
 99e:	cf 8a       	std	Y+23, r12	; 0x17
 9a0:	c6 01       	movw	r24, r12
 9a2:	47 cf       	rjmp	.-370    	; 0x832 <xTaskGenericCreate+0x50>
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	df 91       	pop	r29
 9a8:	cf 91       	pop	r28
 9aa:	1f 91       	pop	r17
 9ac:	0f 91       	pop	r16
 9ae:	ff 90       	pop	r15
 9b0:	ef 90       	pop	r14
 9b2:	df 90       	pop	r13
 9b4:	cf 90       	pop	r12
 9b6:	bf 90       	pop	r11
 9b8:	af 90       	pop	r10
 9ba:	9f 90       	pop	r9
 9bc:	8f 90       	pop	r8
 9be:	7f 90       	pop	r7
 9c0:	6f 90       	pop	r6
 9c2:	5f 90       	pop	r5
 9c4:	4f 90       	pop	r4
 9c6:	08 95       	ret

000009c8 <vTaskStartScheduler>:
 9c8:	af 92       	push	r10
 9ca:	bf 92       	push	r11
 9cc:	cf 92       	push	r12
 9ce:	df 92       	push	r13
 9d0:	ef 92       	push	r14
 9d2:	ff 92       	push	r15
 9d4:	0f 93       	push	r16
 9d6:	a1 2c       	mov	r10, r1
 9d8:	b1 2c       	mov	r11, r1
 9da:	c1 2c       	mov	r12, r1
 9dc:	d1 2c       	mov	r13, r1
 9de:	e1 2c       	mov	r14, r1
 9e0:	f1 2c       	mov	r15, r1
 9e2:	00 e0       	ldi	r16, 0x00	; 0
 9e4:	20 e0       	ldi	r18, 0x00	; 0
 9e6:	30 e0       	ldi	r19, 0x00	; 0
 9e8:	45 e5       	ldi	r20, 0x55	; 85
 9ea:	50 e0       	ldi	r21, 0x00	; 0
 9ec:	63 e1       	ldi	r22, 0x13	; 19
 9ee:	71 e0       	ldi	r23, 0x01	; 1
 9f0:	80 e7       	ldi	r24, 0x70	; 112
 9f2:	96 e0       	ldi	r25, 0x06	; 6
 9f4:	f6 de       	rcall	.-532    	; 0x7e2 <xTaskGenericCreate>
 9f6:	81 30       	cpi	r24, 0x01	; 1
 9f8:	41 f4       	brne	.+16     	; 0xa0a <vTaskStartScheduler+0x42>
 9fa:	f8 94       	cli
 9fc:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <xSchedulerRunning>
 a00:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <xTickCount+0x1>
 a04:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <xTickCount>
 a08:	ca dd       	rcall	.-1132   	; 0x59e <xPortStartScheduler>
 a0a:	0f 91       	pop	r16
 a0c:	ff 90       	pop	r15
 a0e:	ef 90       	pop	r14
 a10:	df 90       	pop	r13
 a12:	cf 90       	pop	r12
 a14:	bf 90       	pop	r11
 a16:	af 90       	pop	r10
 a18:	08 95       	ret

00000a1a <vTaskSuspendAll>:
 a1a:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <uxSchedulerSuspended>
 a1e:	8f 5f       	subi	r24, 0xFF	; 255
 a20:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <uxSchedulerSuspended>
 a24:	08 95       	ret

00000a26 <vTaskIncrementTick>:
 a26:	0f 93       	push	r16
 a28:	1f 93       	push	r17
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <uxSchedulerSuspended>
 a32:	81 11       	cpse	r24, r1
 a34:	af c0       	rjmp	.+350    	; 0xb94 <vTaskIncrementTick+0x16e>
 a36:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xTickCount>
 a3a:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <xTickCount+0x1>
 a3e:	01 96       	adiw	r24, 0x01	; 1
 a40:	90 93 09 07 	sts	0x0709, r25	; 0x800709 <xTickCount+0x1>
 a44:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <xTickCount>
 a48:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xTickCount>
 a4c:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <xTickCount+0x1>
 a50:	89 2b       	or	r24, r25
 a52:	99 f5       	brne	.+102    	; 0xaba <vTaskIncrementTick+0x94>
 a54:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <pxDelayedTaskList>
 a58:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <pxDelayedTaskList+0x1>
 a5c:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <pxOverflowDelayedTaskList>
 a60:	30 91 1f 07 	lds	r19, 0x071F	; 0x80071f <pxOverflowDelayedTaskList+0x1>
 a64:	30 93 21 07 	sts	0x0721, r19	; 0x800721 <pxDelayedTaskList+0x1>
 a68:	20 93 20 07 	sts	0x0720, r18	; 0x800720 <pxDelayedTaskList>
 a6c:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <pxOverflowDelayedTaskList+0x1>
 a70:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <pxOverflowDelayedTaskList>
 a74:	80 91 01 07 	lds	r24, 0x0701	; 0x800701 <xNumOfOverflows>
 a78:	8f 5f       	subi	r24, 0xFF	; 255
 a7a:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <xNumOfOverflows>
 a7e:	e0 91 20 07 	lds	r30, 0x0720	; 0x800720 <pxDelayedTaskList>
 a82:	f0 91 21 07 	lds	r31, 0x0721	; 0x800721 <pxDelayedTaskList+0x1>
 a86:	80 81       	ld	r24, Z
 a88:	81 11       	cpse	r24, r1
 a8a:	07 c0       	rjmp	.+14     	; 0xa9a <vTaskIncrementTick+0x74>
 a8c:	8f ef       	ldi	r24, 0xFF	; 255
 a8e:	9f ef       	ldi	r25, 0xFF	; 255
 a90:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xNextTaskUnblockTime+0x1>
 a94:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xNextTaskUnblockTime>
 a98:	10 c0       	rjmp	.+32     	; 0xaba <vTaskIncrementTick+0x94>
 a9a:	e0 91 20 07 	lds	r30, 0x0720	; 0x800720 <pxDelayedTaskList>
 a9e:	f0 91 21 07 	lds	r31, 0x0721	; 0x800721 <pxDelayedTaskList+0x1>
 aa2:	05 80       	ldd	r0, Z+5	; 0x05
 aa4:	f6 81       	ldd	r31, Z+6	; 0x06
 aa6:	e0 2d       	mov	r30, r0
 aa8:	06 80       	ldd	r0, Z+6	; 0x06
 aaa:	f7 81       	ldd	r31, Z+7	; 0x07
 aac:	e0 2d       	mov	r30, r0
 aae:	82 81       	ldd	r24, Z+2	; 0x02
 ab0:	93 81       	ldd	r25, Z+3	; 0x03
 ab2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xNextTaskUnblockTime+0x1>
 ab6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xNextTaskUnblockTime>
 aba:	20 91 08 07 	lds	r18, 0x0708	; 0x800708 <xTickCount>
 abe:	30 91 09 07 	lds	r19, 0x0709	; 0x800709 <xTickCount+0x1>
 ac2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <xNextTaskUnblockTime>
 ac6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <xNextTaskUnblockTime+0x1>
 aca:	28 17       	cp	r18, r24
 acc:	39 07       	cpc	r19, r25
 ace:	08 f4       	brcc	.+2      	; 0xad2 <vTaskIncrementTick+0xac>
 ad0:	66 c0       	rjmp	.+204    	; 0xb9e <vTaskIncrementTick+0x178>
 ad2:	e0 91 20 07 	lds	r30, 0x0720	; 0x800720 <pxDelayedTaskList>
 ad6:	f0 91 21 07 	lds	r31, 0x0721	; 0x800721 <pxDelayedTaskList+0x1>
 ada:	80 81       	ld	r24, Z
 adc:	88 23       	and	r24, r24
 ade:	99 f0       	breq	.+38     	; 0xb06 <vTaskIncrementTick+0xe0>
 ae0:	e0 91 20 07 	lds	r30, 0x0720	; 0x800720 <pxDelayedTaskList>
 ae4:	f0 91 21 07 	lds	r31, 0x0721	; 0x800721 <pxDelayedTaskList+0x1>
 ae8:	05 80       	ldd	r0, Z+5	; 0x05
 aea:	f6 81       	ldd	r31, Z+6	; 0x06
 aec:	e0 2d       	mov	r30, r0
 aee:	c6 81       	ldd	r28, Z+6	; 0x06
 af0:	d7 81       	ldd	r29, Z+7	; 0x07
 af2:	8a 81       	ldd	r24, Y+2	; 0x02
 af4:	9b 81       	ldd	r25, Y+3	; 0x03
 af6:	20 91 08 07 	lds	r18, 0x0708	; 0x800708 <xTickCount>
 afa:	30 91 09 07 	lds	r19, 0x0709	; 0x800709 <xTickCount+0x1>
 afe:	28 17       	cp	r18, r24
 b00:	39 07       	cpc	r19, r25
 b02:	f8 f4       	brcc	.+62     	; 0xb42 <vTaskIncrementTick+0x11c>
 b04:	19 c0       	rjmp	.+50     	; 0xb38 <vTaskIncrementTick+0x112>
 b06:	8f ef       	ldi	r24, 0xFF	; 255
 b08:	9f ef       	ldi	r25, 0xFF	; 255
 b0a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xNextTaskUnblockTime+0x1>
 b0e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xNextTaskUnblockTime>
 b12:	45 c0       	rjmp	.+138    	; 0xb9e <vTaskIncrementTick+0x178>
 b14:	e0 91 20 07 	lds	r30, 0x0720	; 0x800720 <pxDelayedTaskList>
 b18:	f0 91 21 07 	lds	r31, 0x0721	; 0x800721 <pxDelayedTaskList+0x1>
 b1c:	05 80       	ldd	r0, Z+5	; 0x05
 b1e:	f6 81       	ldd	r31, Z+6	; 0x06
 b20:	e0 2d       	mov	r30, r0
 b22:	c6 81       	ldd	r28, Z+6	; 0x06
 b24:	d7 81       	ldd	r29, Z+7	; 0x07
 b26:	8a 81       	ldd	r24, Y+2	; 0x02
 b28:	9b 81       	ldd	r25, Y+3	; 0x03
 b2a:	20 91 08 07 	lds	r18, 0x0708	; 0x800708 <xTickCount>
 b2e:	30 91 09 07 	lds	r19, 0x0709	; 0x800709 <xTickCount+0x1>
 b32:	28 17       	cp	r18, r24
 b34:	39 07       	cpc	r19, r25
 b36:	28 f4       	brcc	.+10     	; 0xb42 <vTaskIncrementTick+0x11c>
 b38:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <xNextTaskUnblockTime+0x1>
 b3c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <xNextTaskUnblockTime>
 b40:	2e c0       	rjmp	.+92     	; 0xb9e <vTaskIncrementTick+0x178>
 b42:	8e 01       	movw	r16, r28
 b44:	0e 5f       	subi	r16, 0xFE	; 254
 b46:	1f 4f       	sbci	r17, 0xFF	; 255
 b48:	c8 01       	movw	r24, r16
 b4a:	57 db       	rcall	.-2386   	; 0x1fa <vListRemove>
 b4c:	8c 89       	ldd	r24, Y+20	; 0x14
 b4e:	9d 89       	ldd	r25, Y+21	; 0x15
 b50:	89 2b       	or	r24, r25
 b52:	19 f0       	breq	.+6      	; 0xb5a <vTaskIncrementTick+0x134>
 b54:	ce 01       	movw	r24, r28
 b56:	0c 96       	adiw	r24, 0x0c	; 12
 b58:	50 db       	rcall	.-2400   	; 0x1fa <vListRemove>
 b5a:	2e 89       	ldd	r18, Y+22	; 0x16
 b5c:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxTopReadyPriority>
 b60:	82 17       	cp	r24, r18
 b62:	10 f4       	brcc	.+4      	; 0xb68 <vTaskIncrementTick+0x142>
 b64:	20 93 06 07 	sts	0x0706, r18	; 0x800706 <uxTopReadyPriority>
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	c9 01       	movw	r24, r18
 b6c:	88 0f       	add	r24, r24
 b6e:	99 1f       	adc	r25, r25
 b70:	88 0f       	add	r24, r24
 b72:	99 1f       	adc	r25, r25
 b74:	88 0f       	add	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	82 0f       	add	r24, r18
 b7a:	93 1f       	adc	r25, r19
 b7c:	b8 01       	movw	r22, r16
 b7e:	8c 5c       	subi	r24, 0xCC	; 204
 b80:	98 4f       	sbci	r25, 0xF8	; 248
 b82:	d9 da       	rcall	.-2638   	; 0x136 <vListInsertEnd>
 b84:	e0 91 20 07 	lds	r30, 0x0720	; 0x800720 <pxDelayedTaskList>
 b88:	f0 91 21 07 	lds	r31, 0x0721	; 0x800721 <pxDelayedTaskList+0x1>
 b8c:	80 81       	ld	r24, Z
 b8e:	81 11       	cpse	r24, r1
 b90:	c1 cf       	rjmp	.-126    	; 0xb14 <vTaskIncrementTick+0xee>
 b92:	b9 cf       	rjmp	.-142    	; 0xb06 <vTaskIncrementTick+0xe0>
 b94:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxMissedTicks>
 b98:	8f 5f       	subi	r24, 0xFF	; 255
 b9a:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <uxMissedTicks>
 b9e:	df 91       	pop	r29
 ba0:	cf 91       	pop	r28
 ba2:	1f 91       	pop	r17
 ba4:	0f 91       	pop	r16
 ba6:	08 95       	ret

00000ba8 <xTaskResumeAll>:
 ba8:	cf 92       	push	r12
 baa:	df 92       	push	r13
 bac:	ef 92       	push	r14
 bae:	ff 92       	push	r15
 bb0:	0f 93       	push	r16
 bb2:	1f 93       	push	r17
 bb4:	cf 93       	push	r28
 bb6:	df 93       	push	r29
 bb8:	0f b6       	in	r0, 0x3f	; 63
 bba:	f8 94       	cli
 bbc:	0f 92       	push	r0
 bbe:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <uxSchedulerSuspended>
 bc2:	81 50       	subi	r24, 0x01	; 1
 bc4:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <uxSchedulerSuspended>
 bc8:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <uxSchedulerSuspended>
 bcc:	81 11       	cpse	r24, r1
 bce:	5f c0       	rjmp	.+190    	; 0xc8e <xTaskResumeAll+0xe6>
 bd0:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxCurrentNumberOfTasks>
 bd4:	81 11       	cpse	r24, r1
 bd6:	2f c0       	rjmp	.+94     	; 0xc36 <xTaskResumeAll+0x8e>
 bd8:	5d c0       	rjmp	.+186    	; 0xc94 <xTaskResumeAll+0xec>
 bda:	d7 01       	movw	r26, r14
 bdc:	15 96       	adiw	r26, 0x05	; 5
 bde:	ed 91       	ld	r30, X+
 be0:	fc 91       	ld	r31, X
 be2:	16 97       	sbiw	r26, 0x06	; 6
 be4:	c6 81       	ldd	r28, Z+6	; 0x06
 be6:	d7 81       	ldd	r29, Z+7	; 0x07
 be8:	ce 01       	movw	r24, r28
 bea:	0c 96       	adiw	r24, 0x0c	; 12
 bec:	06 db       	rcall	.-2548   	; 0x1fa <vListRemove>
 bee:	8e 01       	movw	r16, r28
 bf0:	0e 5f       	subi	r16, 0xFE	; 254
 bf2:	1f 4f       	sbci	r17, 0xFF	; 255
 bf4:	c8 01       	movw	r24, r16
 bf6:	01 db       	rcall	.-2558   	; 0x1fa <vListRemove>
 bf8:	2e 89       	ldd	r18, Y+22	; 0x16
 bfa:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxTopReadyPriority>
 bfe:	82 17       	cp	r24, r18
 c00:	10 f4       	brcc	.+4      	; 0xc06 <xTaskResumeAll+0x5e>
 c02:	20 93 06 07 	sts	0x0706, r18	; 0x800706 <uxTopReadyPriority>
 c06:	30 e0       	ldi	r19, 0x00	; 0
 c08:	c9 01       	movw	r24, r18
 c0a:	88 0f       	add	r24, r24
 c0c:	99 1f       	adc	r25, r25
 c0e:	88 0f       	add	r24, r24
 c10:	99 1f       	adc	r25, r25
 c12:	88 0f       	add	r24, r24
 c14:	99 1f       	adc	r25, r25
 c16:	82 0f       	add	r24, r18
 c18:	93 1f       	adc	r25, r19
 c1a:	b8 01       	movw	r22, r16
 c1c:	8c 5c       	subi	r24, 0xCC	; 204
 c1e:	98 4f       	sbci	r25, 0xF8	; 248
 c20:	8a da       	rcall	.-2796   	; 0x136 <vListInsertEnd>
 c22:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <pxCurrentTCB>
 c26:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 c2a:	9e 89       	ldd	r25, Y+22	; 0x16
 c2c:	86 89       	ldd	r24, Z+22	; 0x16
 c2e:	98 17       	cp	r25, r24
 c30:	58 f0       	brcs	.+22     	; 0xc48 <xTaskResumeAll+0xa0>
 c32:	dc 2c       	mov	r13, r12
 c34:	09 c0       	rjmp	.+18     	; 0xc48 <xTaskResumeAll+0xa0>
 c36:	d1 2c       	mov	r13, r1
 c38:	0f 2e       	mov	r0, r31
 c3a:	f5 e1       	ldi	r31, 0x15	; 21
 c3c:	ef 2e       	mov	r14, r31
 c3e:	f7 e0       	ldi	r31, 0x07	; 7
 c40:	ff 2e       	mov	r15, r31
 c42:	f0 2d       	mov	r31, r0
 c44:	cc 24       	eor	r12, r12
 c46:	c3 94       	inc	r12
 c48:	f7 01       	movw	r30, r14
 c4a:	80 81       	ld	r24, Z
 c4c:	81 11       	cpse	r24, r1
 c4e:	c5 cf       	rjmp	.-118    	; 0xbda <xTaskResumeAll+0x32>
 c50:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxMissedTicks>
 c54:	88 23       	and	r24, r24
 c56:	79 f0       	breq	.+30     	; 0xc76 <xTaskResumeAll+0xce>
 c58:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxMissedTicks>
 c5c:	88 23       	and	r24, r24
 c5e:	91 f0       	breq	.+36     	; 0xc84 <xTaskResumeAll+0xdc>
 c60:	e2 de       	rcall	.-572    	; 0xa26 <vTaskIncrementTick>
 c62:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxMissedTicks>
 c66:	81 50       	subi	r24, 0x01	; 1
 c68:	80 93 03 07 	sts	0x0703, r24	; 0x800703 <uxMissedTicks>
 c6c:	80 91 03 07 	lds	r24, 0x0703	; 0x800703 <uxMissedTicks>
 c70:	81 11       	cpse	r24, r1
 c72:	f6 cf       	rjmp	.-20     	; 0xc60 <xTaskResumeAll+0xb8>
 c74:	07 c0       	rjmp	.+14     	; 0xc84 <xTaskResumeAll+0xdc>
 c76:	f1 e0       	ldi	r31, 0x01	; 1
 c78:	df 16       	cp	r13, r31
 c7a:	21 f0       	breq	.+8      	; 0xc84 <xTaskResumeAll+0xdc>
 c7c:	80 91 02 07 	lds	r24, 0x0702	; 0x800702 <xMissedYield>
 c80:	81 30       	cpi	r24, 0x01	; 1
 c82:	39 f4       	brne	.+14     	; 0xc92 <xTaskResumeAll+0xea>
 c84:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <xMissedYield>
 c88:	c4 dc       	rcall	.-1656   	; 0x612 <vPortYield>
 c8a:	81 e0       	ldi	r24, 0x01	; 1
 c8c:	03 c0       	rjmp	.+6      	; 0xc94 <xTaskResumeAll+0xec>
 c8e:	80 e0       	ldi	r24, 0x00	; 0
 c90:	01 c0       	rjmp	.+2      	; 0xc94 <xTaskResumeAll+0xec>
 c92:	80 e0       	ldi	r24, 0x00	; 0
 c94:	0f 90       	pop	r0
 c96:	0f be       	out	0x3f, r0	; 63
 c98:	df 91       	pop	r29
 c9a:	cf 91       	pop	r28
 c9c:	1f 91       	pop	r17
 c9e:	0f 91       	pop	r16
 ca0:	ff 90       	pop	r15
 ca2:	ef 90       	pop	r14
 ca4:	df 90       	pop	r13
 ca6:	cf 90       	pop	r12
 ca8:	08 95       	ret

00000caa <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 caa:	cf 93       	push	r28
 cac:	df 93       	push	r29
 cae:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 cb0:	89 2b       	or	r24, r25
 cb2:	91 f0       	breq	.+36     	; 0xcd8 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 cb4:	b2 de       	rcall	.-668    	; 0xa1a <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 cb6:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <xTickCount>
 cba:	90 91 09 07 	lds	r25, 0x0709	; 0x800709 <xTickCount+0x1>
 cbe:	c8 0f       	add	r28, r24
 cc0:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 cc2:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <pxCurrentTCB>
 cc6:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <pxCurrentTCB+0x1>
 cca:	02 96       	adiw	r24, 0x02	; 2
 ccc:	96 da       	rcall	.-2772   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 cce:	ce 01       	movw	r24, r28
 cd0:	53 dd       	rcall	.-1370   	; 0x778 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 cd2:	6a df       	rcall	.-300    	; 0xba8 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 cd4:	81 11       	cpse	r24, r1
 cd6:	01 c0       	rjmp	.+2      	; 0xcda <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 cd8:	9c dc       	rcall	.-1736   	; 0x612 <vPortYield>
		}
	}
 cda:	df 91       	pop	r29
 cdc:	cf 91       	pop	r28
 cde:	08 95       	ret

00000ce0 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 ce0:	0f 2e       	mov	r0, r31
 ce2:	fc e0       	ldi	r31, 0x0C	; 12
 ce4:	ef 2e       	mov	r14, r31
 ce6:	f7 e0       	ldi	r31, 0x07	; 7
 ce8:	ff 2e       	mov	r15, r31
 cea:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 cec:	c4 e3       	ldi	r28, 0x34	; 52
 cee:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 cf0:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxTasksDeleted>
 cf4:	88 23       	and	r24, r24
 cf6:	29 f1       	breq	.+74     	; 0xd42 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 cf8:	90 de       	rcall	.-736    	; 0xa1a <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 cfa:	d7 01       	movw	r26, r14
 cfc:	1c 91       	ld	r17, X
			xTaskResumeAll();
 cfe:	54 df       	rcall	.-344    	; 0xba8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 d00:	11 23       	and	r17, r17
 d02:	f9 f0       	breq	.+62     	; 0xd42 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 d04:	0f b6       	in	r0, 0x3f	; 63
 d06:	f8 94       	cli
 d08:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 d0a:	d7 01       	movw	r26, r14
 d0c:	15 96       	adiw	r26, 0x05	; 5
 d0e:	ed 91       	ld	r30, X+
 d10:	fc 91       	ld	r31, X
 d12:	16 97       	sbiw	r26, 0x06	; 6
 d14:	06 81       	ldd	r16, Z+6	; 0x06
 d16:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 d18:	c8 01       	movw	r24, r16
 d1a:	02 96       	adiw	r24, 0x02	; 2
 d1c:	6e da       	rcall	.-2852   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 d1e:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxCurrentNumberOfTasks>
 d22:	81 50       	subi	r24, 0x01	; 1
 d24:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 d28:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <uxTasksDeleted>
 d2c:	81 50       	subi	r24, 0x01	; 1
 d2e:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 d32:	0f 90       	pop	r0
 d34:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 d36:	f8 01       	movw	r30, r16
 d38:	87 89       	ldd	r24, Z+23	; 0x17
 d3a:	90 8d       	ldd	r25, Z+24	; 0x18
 d3c:	e9 d9       	rcall	.-3118   	; 0x110 <vPortFree>
		vPortFree( pxTCB );
 d3e:	c8 01       	movw	r24, r16
 d40:	e7 d9       	rcall	.-3122   	; 0x110 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 d42:	88 81       	ld	r24, Y
 d44:	82 30       	cpi	r24, 0x02	; 2
 d46:	a0 f2       	brcs	.-88     	; 0xcf0 <prvIdleTask+0x10>
			{
				taskYIELD();
 d48:	64 dc       	rcall	.-1848   	; 0x612 <vPortYield>
 d4a:	d2 cf       	rjmp	.-92     	; 0xcf0 <prvIdleTask+0x10>

00000d4c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 d4c:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <uxSchedulerSuspended>
 d50:	81 11       	cpse	r24, r1
 d52:	13 c0       	rjmp	.+38     	; 0xd7a <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d54:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxTopReadyPriority>
 d58:	90 e0       	ldi	r25, 0x00	; 0
 d5a:	fc 01       	movw	r30, r24
 d5c:	ee 0f       	add	r30, r30
 d5e:	ff 1f       	adc	r31, r31
 d60:	ee 0f       	add	r30, r30
 d62:	ff 1f       	adc	r31, r31
 d64:	ee 0f       	add	r30, r30
 d66:	ff 1f       	adc	r31, r31
 d68:	8e 0f       	add	r24, r30
 d6a:	9f 1f       	adc	r25, r31
 d6c:	fc 01       	movw	r30, r24
 d6e:	ec 5c       	subi	r30, 0xCC	; 204
 d70:	f8 4f       	sbci	r31, 0xF8	; 248
 d72:	80 81       	ld	r24, Z
 d74:	88 23       	and	r24, r24
 d76:	29 f0       	breq	.+10     	; 0xd82 <vTaskSwitchContext+0x36>
 d78:	1b c0       	rjmp	.+54     	; 0xdb0 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 d7a:	81 e0       	ldi	r24, 0x01	; 1
 d7c:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <xMissedYield>
 d80:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 d82:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxTopReadyPriority>
 d86:	81 50       	subi	r24, 0x01	; 1
 d88:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 d8c:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxTopReadyPriority>
 d90:	90 e0       	ldi	r25, 0x00	; 0
 d92:	fc 01       	movw	r30, r24
 d94:	ee 0f       	add	r30, r30
 d96:	ff 1f       	adc	r31, r31
 d98:	ee 0f       	add	r30, r30
 d9a:	ff 1f       	adc	r31, r31
 d9c:	ee 0f       	add	r30, r30
 d9e:	ff 1f       	adc	r31, r31
 da0:	8e 0f       	add	r24, r30
 da2:	9f 1f       	adc	r25, r31
 da4:	fc 01       	movw	r30, r24
 da6:	ec 5c       	subi	r30, 0xCC	; 204
 da8:	f8 4f       	sbci	r31, 0xF8	; 248
 daa:	80 81       	ld	r24, Z
 dac:	88 23       	and	r24, r24
 dae:	49 f3       	breq	.-46     	; 0xd82 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 db0:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <uxTopReadyPriority>
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	9c 01       	movw	r18, r24
 db8:	22 0f       	add	r18, r18
 dba:	33 1f       	adc	r19, r19
 dbc:	22 0f       	add	r18, r18
 dbe:	33 1f       	adc	r19, r19
 dc0:	22 0f       	add	r18, r18
 dc2:	33 1f       	adc	r19, r19
 dc4:	28 0f       	add	r18, r24
 dc6:	39 1f       	adc	r19, r25
 dc8:	d9 01       	movw	r26, r18
 dca:	ac 5c       	subi	r26, 0xCC	; 204
 dcc:	b8 4f       	sbci	r27, 0xF8	; 248
 dce:	11 96       	adiw	r26, 0x01	; 1
 dd0:	ed 91       	ld	r30, X+
 dd2:	fc 91       	ld	r31, X
 dd4:	12 97       	sbiw	r26, 0x02	; 2
 dd6:	02 80       	ldd	r0, Z+2	; 0x02
 dd8:	f3 81       	ldd	r31, Z+3	; 0x03
 dda:	e0 2d       	mov	r30, r0
 ddc:	12 96       	adiw	r26, 0x02	; 2
 dde:	fc 93       	st	X, r31
 de0:	ee 93       	st	-X, r30
 de2:	11 97       	sbiw	r26, 0x01	; 1
 de4:	29 5c       	subi	r18, 0xC9	; 201
 de6:	38 4f       	sbci	r19, 0xF8	; 248
 de8:	e2 17       	cp	r30, r18
 dea:	f3 07       	cpc	r31, r19
 dec:	29 f4       	brne	.+10     	; 0xdf8 <vTaskSwitchContext+0xac>
 dee:	22 81       	ldd	r18, Z+2	; 0x02
 df0:	33 81       	ldd	r19, Z+3	; 0x03
 df2:	fd 01       	movw	r30, r26
 df4:	32 83       	std	Z+2, r19	; 0x02
 df6:	21 83       	std	Z+1, r18	; 0x01
 df8:	fc 01       	movw	r30, r24
 dfa:	ee 0f       	add	r30, r30
 dfc:	ff 1f       	adc	r31, r31
 dfe:	ee 0f       	add	r30, r30
 e00:	ff 1f       	adc	r31, r31
 e02:	ee 0f       	add	r30, r30
 e04:	ff 1f       	adc	r31, r31
 e06:	8e 0f       	add	r24, r30
 e08:	9f 1f       	adc	r25, r31
 e0a:	fc 01       	movw	r30, r24
 e0c:	ec 5c       	subi	r30, 0xCC	; 204
 e0e:	f8 4f       	sbci	r31, 0xF8	; 248
 e10:	01 80       	ldd	r0, Z+1	; 0x01
 e12:	f2 81       	ldd	r31, Z+2	; 0x02
 e14:	e0 2d       	mov	r30, r0
 e16:	86 81       	ldd	r24, Z+6	; 0x06
 e18:	97 81       	ldd	r25, Z+7	; 0x07
 e1a:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <pxCurrentTCB+0x1>
 e1e:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <pxCurrentTCB>
 e22:	08 95       	ret

00000e24 <memset>:
 e24:	dc 01       	movw	r26, r24
 e26:	01 c0       	rjmp	.+2      	; 0xe2a <memset+0x6>
 e28:	6d 93       	st	X+, r22
 e2a:	41 50       	subi	r20, 0x01	; 1
 e2c:	50 40       	sbci	r21, 0x00	; 0
 e2e:	e0 f7       	brcc	.-8      	; 0xe28 <memset+0x4>
 e30:	08 95       	ret

00000e32 <strncpy>:
 e32:	fb 01       	movw	r30, r22
 e34:	dc 01       	movw	r26, r24
 e36:	41 50       	subi	r20, 0x01	; 1
 e38:	50 40       	sbci	r21, 0x00	; 0
 e3a:	48 f0       	brcs	.+18     	; 0xe4e <strncpy+0x1c>
 e3c:	01 90       	ld	r0, Z+
 e3e:	0d 92       	st	X+, r0
 e40:	00 20       	and	r0, r0
 e42:	c9 f7       	brne	.-14     	; 0xe36 <strncpy+0x4>
 e44:	01 c0       	rjmp	.+2      	; 0xe48 <strncpy+0x16>
 e46:	1d 92       	st	X+, r1
 e48:	41 50       	subi	r20, 0x01	; 1
 e4a:	50 40       	sbci	r21, 0x00	; 0
 e4c:	e0 f7       	brcc	.-8      	; 0xe46 <strncpy+0x14>
 e4e:	08 95       	ret

00000e50 <_exit>:
 e50:	f8 94       	cli

00000e52 <__stop_program>:
 e52:	ff cf       	rjmp	.-2      	; 0xe52 <__stop_program>
